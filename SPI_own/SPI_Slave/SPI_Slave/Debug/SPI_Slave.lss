
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b97  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000878  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069d  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000654  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041d  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_17>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	63 01       	movw	r12, r6
  6a:	6a 01       	movw	r12, r20
  6c:	71 01       	movw	r14, r2
  6e:	7b 01       	movw	r14, r22
  70:	85 01       	movw	r16, r10
  72:	8f 01       	movw	r16, r30
  74:	99 01       	movw	r18, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e4 e7       	ldi	r30, 0x74	; 116
  8a:	f3 e0       	ldi	r31, 0x03	; 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a2 e0       	ldi	r26, 0x02	; 2
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 84 00 	call	0x108	; 0x108 <main>
  ac:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <I_O>:
}

void I_O()
{
	// 8 bit counter
	DDRD = 0xFF; // OUT
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; // LOW
  b8:	1b b8       	out	0x0b, r1	; 11
  ba:	08 95       	ret

000000bc <setup>:
/********************************************************************/
/*---------------------Non-interrupt Subroutines--------------------*/
void setup()
{
	// Disable global interruption
	cli();
  bc:	f8 94       	cli
	// Use 16MHz as F_cpu
	CLKPR = (1 << CLKPCE);
  be:	e1 e6       	ldi	r30, 0x61	; 97
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
	CLKPR = 0x00;
  c6:	10 82       	st	Z, r1
	// Disable serial communication
	UCSR0B = 0x00;
  c8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// I_O configuration
	I_O();
  cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <I_O>
	// ADC configuration
	configADC(channel);
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	0e 94 30 01 	call	0x260	; 0x260 <configADC>
	// SPI configuration
	initSPI(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_LAST_EDGE);
  d8:	24 e0       	ldi	r18, 0x04	; 4
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	0e 94 4b 01 	call	0x296	; 0x296 <initSPI>
	// SPI interruption enable
	SPCR |= (1 << SPIE);
  e4:	8c b5       	in	r24, 0x2c	; 44
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8c bd       	out	0x2c, r24	; 44
	// Enable global interruption
	sei();
  ea:	78 94       	sei
  ec:	08 95       	ret

000000ee <program>:
}

void program()
{
	// Display ADC6 value on PORTD
	PORTD = adcval6;
  ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adcval6>
  f2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	81 ee       	ldi	r24, 0xE1	; 225
  f8:	94 e0       	ldi	r25, 0x04	; 4
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <program+0xc>
 102:	00 c0       	rjmp	.+0      	; 0x104 <program+0x16>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <main>:
/********************************************************************/
/*------------------------------Main--------------------------------*/
int main(void)
{
	// Global configuration of uC
	setup();
 108:	0e 94 5e 00 	call	0xbc	; 0xbc <setup>
	// Main loop
	while (1)
	{
		program();
 10c:	0e 94 77 00 	call	0xee	; 0xee <program>
 110:	fd cf       	rjmp	.-6      	; 0x10c <main+0x4>

00000112 <__vector_21>:


/********************************************************************/
/*----------------------Interrupt Subroutines-----------------------*/
ISR(ADC_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	cli();
 134:	f8 94       	cli
	// Alternate between ADC channels
	if (channel == 6)
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	41 f4       	brne	.+16     	; 0x14e <__vector_21+0x3c>
	{
		// Store the current ADC value in variable
		adcval6 = ADCH;
 13e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 142:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adcval6>
		// Change channel
		channel = 7;
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	07 c0       	rjmp	.+14     	; 0x15c <__vector_21+0x4a>
	}
	else
	{
		// Store the current ADC value in variable
		adcval7 = ADCH;
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 152:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		// Change channel
		channel = 6;
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// Configure next channel and start conversion
	configChannel(channel);
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <configChannel>
	ADCSRA |= (1 << ADSC);
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
	sei();
 16e:	78 94       	sei
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_17>:

ISR(SPI_STC_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	uint8_t spival = SPDR;
 1b4:	8e b5       	in	r24, 0x2e	; 46
	if (spival == 0x0A)
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	29 f4       	brne	.+10     	; 0x1c4 <__vector_17+0x32>
	{
		spiWrite(adcval6);
 1ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adcval6>
 1be:	0e 94 b0 01 	call	0x360	; 0x360 <spiWrite>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <__vector_17+0x3e>
	}
	else if (spival == 0x0B)
 1c4:	8b 30       	cpi	r24, 0x0B	; 11
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <__vector_17+0x3e>
	{
		spiWrite(adcval7);
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1cc:	0e 94 b0 01 	call	0x360	; 0x360 <spiWrite>
	}
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <configChannel>:
	ADCSRA |= (1 << ADSC);
}

void configChannel(uint8_t canal)
{
	switch(canal)
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	b9 f0       	breq	.+46     	; 0x224 <configChannel+0x32>
 1f6:	28 f4       	brcc	.+10     	; 0x202 <configChannel+0x10>
 1f8:	88 23       	and	r24, r24
 1fa:	41 f0       	breq	.+16     	; 0x20c <configChannel+0x1a>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	61 f0       	breq	.+24     	; 0x218 <configChannel+0x26>
 200:	29 c0       	rjmp	.+82     	; 0x254 <configChannel+0x62>
 202:	86 30       	cpi	r24, 0x06	; 6
 204:	a9 f0       	breq	.+42     	; 0x230 <configChannel+0x3e>
 206:	87 30       	cpi	r24, 0x07	; 7
 208:	e1 f0       	breq	.+56     	; 0x242 <configChannel+0x50>
 20a:	24 c0       	rjmp	.+72     	; 0x254 <configChannel+0x62>
	{
		case 0:
			ADMUX &= ~( (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0) ); // (MUX0123 = 0000)
 20c:	ec e7       	ldi	r30, 0x7C	; 124
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	80 83       	st	Z, r24
			break;
 216:	08 95       	ret
		case 1:
			ADMUX |=  (1 << MUX0) ; // (MUX0123 = 0001)
 218:	ec e7       	ldi	r30, 0x7C	; 124
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	80 83       	st	Z, r24
			break;
 222:	08 95       	ret
		case 2:
			ADMUX |=  (1 << MUX1) ; // (MUX0123 = 0010)
 224:	ec e7       	ldi	r30, 0x7C	; 124
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 83       	st	Z, r24
			break;
 22e:	08 95       	ret
		case 6:
			ADMUX |=  (1 << MUX2) | (1 << MUX1) ; // (MUX0123 = 0110)
 230:	ec e7       	ldi	r30, 0x7C	; 124
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	86 60       	ori	r24, 0x06	; 6
 238:	80 83       	st	Z, r24
			ADMUX &= ~( (1 << MUX3) | (1 << MUX0) );
 23a:	80 81       	ld	r24, Z
 23c:	86 7f       	andi	r24, 0xF6	; 246
 23e:	80 83       	st	Z, r24
			break;
 240:	08 95       	ret
		case 7:
			ADMUX |=  (1 << MUX2) | (1 << MUX1) | (1 << MUX0) ; // (MUX0123 = 0111)
 242:	ec e7       	ldi	r30, 0x7C	; 124
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	87 60       	ori	r24, 0x07	; 7
 24a:	80 83       	st	Z, r24
			ADMUX &= ~(1 << MUX3);
 24c:	80 81       	ld	r24, Z
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 83       	st	Z, r24
			break;
 252:	08 95       	ret
		default:
			ADMUX &= ~( (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0) ); // Channel 0
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <configADC>:
#include "ADClib.h"

void configADC(uint8_t canal)
{
	// Begin ADC Multiplexer
	ADMUX = 0x00;
 260:	ec e7       	ldi	r30, 0x7C	; 124
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	10 82       	st	Z, r1
	// AVcc
	ADMUX |= (1	<< REFS0);
 266:	90 81       	ld	r25, Z
 268:	90 64       	ori	r25, 0x40	; 64
 26a:	90 83       	st	Z, r25
	// Activate justification L
	ADMUX |= (1 << ADLAR);
 26c:	90 81       	ld	r25, Z
 26e:	90 62       	ori	r25, 0x20	; 32
 270:	90 83       	st	Z, r25
	// Select channel
	configChannel(canal);
 272:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <configChannel>
	// Begin ADC Control & Status Register
	ADCSRA = 0x00;
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	10 82       	st	Z, r1
	// Enable interruptions
	ADCSRA |= (1 << ADIE);
 27c:	80 81       	ld	r24, Z
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	80 83       	st	Z, r24
	// PreScaler = 128 --> f_adc = 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 282:	80 81       	ld	r24, Z
 284:	87 60       	ori	r24, 0x07	; 7
 286:	80 83       	st	Z, r24
	// ADC enable
	ADCSRA |= (1 << ADEN);
 288:	80 81       	ld	r24, Z
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	80 83       	st	Z, r24
	// Start first conversion
	ADCSRA |= (1 << ADSC);
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	08 95       	ret

00000296 <initSPI>:
 */ 

#include "SPI_lib.h"
// Function to initialize SPI configuration on uC
void initSPI(Spi_Type type, Spi_Data_Order dataorder, Spi_Clock_Polarity polarity, Spi_Clock_Phase phase)
{
 296:	e8 2f       	mov	r30, r24
	// PB3: MOSI
	// PB4: MISO
	// PB5: SCK
	
	// Master mode
	if (type & (1 << MSTR))
 298:	84 ff       	sbrs	r24, 4
 29a:	52 c0       	rjmp	.+164    	; 0x340 <initSPI+0xaa>
	{
		// OUTPUT
		DDRB |= (1 << DDB5) | (1 << DDB3) | (1 << DDB2);
 29c:	84 b1       	in	r24, 0x04	; 4
 29e:	8c 62       	ori	r24, 0x2C	; 44
 2a0:	84 b9       	out	0x04, r24	; 4
		// INPUT
		DDRB &= ~ (1 << DDB4);
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	84 b9       	out	0x04, r24	; 4
		// Master mode
		SPCR |= (1 << MSTR);
 2a8:	8c b5       	in	r24, 0x2c	; 44
 2aa:	80 61       	ori	r24, 0x10	; 16
 2ac:	8c bd       	out	0x2c, r24	; 44
		// Select PreScaler
		uint8_t temporal = type & 0b00000111;
 2ae:	e7 70       	andi	r30, 0x07	; 7
		// Cases
		switch(temporal)
 2b0:	8e 2f       	mov	r24, r30
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	87 30       	cpi	r24, 0x07	; 7
 2b6:	91 05       	cpc	r25, r1
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <initSPI+0x26>
 2ba:	4b c0       	rjmp	.+150    	; 0x352 <initSPI+0xbc>
 2bc:	fc 01       	movw	r30, r24
 2be:	ec 5c       	subi	r30, 0xCC	; 204
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	0c 94 b2 01 	jmp	0x364	; 0x364 <__tablejump2__>
		{
			case 0: // PreScaler = 2
				SPCR &= ~( (1 << SPR1) | (1 << SPR0) );
 2c6:	8c b5       	in	r24, 0x2c	; 44
 2c8:	8c 7f       	andi	r24, 0xFC	; 252
 2ca:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1 << SPI2X);
 2cc:	8d b5       	in	r24, 0x2d	; 45
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	8d bd       	out	0x2d, r24	; 45
				break;
 2d2:	3f c0       	rjmp	.+126    	; 0x352 <initSPI+0xbc>
			case 1: // PreScaler = 4
				SPCR &= ~( (1 << SPR1) | (1 << SPR0) );
 2d4:	8c b5       	in	r24, 0x2c	; 44
 2d6:	8c 7f       	andi	r24, 0xFC	; 252
 2d8:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 2da:	8d b5       	in	r24, 0x2d	; 45
 2dc:	8e 7f       	andi	r24, 0xFE	; 254
 2de:	8d bd       	out	0x2d, r24	; 45
				break;
 2e0:	38 c0       	rjmp	.+112    	; 0x352 <initSPI+0xbc>
			case 2: // PreScaler = 8
				SPCR |= (1 << SPR0);
 2e2:	8c b5       	in	r24, 0x2c	; 44
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1 << SPR1);
 2e8:	8c b5       	in	r24, 0x2c	; 44
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1 << SPI2X);
 2ee:	8d b5       	in	r24, 0x2d	; 45
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	8d bd       	out	0x2d, r24	; 45
				break;
 2f4:	2e c0       	rjmp	.+92     	; 0x352 <initSPI+0xbc>
			case 3: // PreScaler = 16
				SPCR |= (1 << SPR0);
 2f6:	8c b5       	in	r24, 0x2c	; 44
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1 << SPR1);
 2fc:	8c b5       	in	r24, 0x2c	; 44
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 302:	8d b5       	in	r24, 0x2d	; 45
 304:	8e 7f       	andi	r24, 0xFE	; 254
 306:	8d bd       	out	0x2d, r24	; 45
				break;
 308:	24 c0       	rjmp	.+72     	; 0x352 <initSPI+0xbc>
			case 4: // PreScaler = 32
				SPCR &= ~(1 << SPR0);
 30a:	8c b5       	in	r24, 0x2c	; 44
 30c:	8e 7f       	andi	r24, 0xFE	; 254
 30e:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1 << SPR1);
 310:	8c b5       	in	r24, 0x2c	; 44
 312:	82 60       	ori	r24, 0x02	; 2
 314:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1 << SPI2X);
 316:	8d b5       	in	r24, 0x2d	; 45
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	8d bd       	out	0x2d, r24	; 45
				break;
 31c:	1a c0       	rjmp	.+52     	; 0x352 <initSPI+0xbc>
			case 5: // PreScaler = 64
				SPCR &= ~(1 << SPR0);
 31e:	8c b5       	in	r24, 0x2c	; 44
 320:	8e 7f       	andi	r24, 0xFE	; 254
 322:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1 << SPR1);
 324:	8c b5       	in	r24, 0x2c	; 44
 326:	82 60       	ori	r24, 0x02	; 2
 328:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 32a:	8d b5       	in	r24, 0x2d	; 45
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	8d bd       	out	0x2d, r24	; 45
				break;
 330:	10 c0       	rjmp	.+32     	; 0x352 <initSPI+0xbc>
			case 6: // PreScaler = 128
				SPCR |= (1 << SPR0) | (1 << SPR1);
 332:	8c b5       	in	r24, 0x2c	; 44
 334:	83 60       	ori	r24, 0x03	; 3
 336:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 338:	8d b5       	in	r24, 0x2d	; 45
 33a:	8e 7f       	andi	r24, 0xFE	; 254
 33c:	8d bd       	out	0x2d, r24	; 45
				break;
 33e:	09 c0       	rjmp	.+18     	; 0x352 <initSPI+0xbc>
		}
	}
	else
	{
		// OUTPUT
		DDRB &= ~((1 << DDB5) | (1 << DDB3) | (1 << DDB2));
 340:	84 b1       	in	r24, 0x04	; 4
 342:	83 7d       	andi	r24, 0xD3	; 211
 344:	84 b9       	out	0x04, r24	; 4
		// INPUT
		DDRB |= (1 << DDB4);
 346:	84 b1       	in	r24, 0x04	; 4
 348:	80 61       	ori	r24, 0x10	; 16
 34a:	84 b9       	out	0x04, r24	; 4
		// Slave mode
		SPCR &= ~ (1 << MSTR);
 34c:	8c b5       	in	r24, 0x2c	; 44
 34e:	8f 7e       	andi	r24, 0xEF	; 239
 350:	8c bd       	out	0x2c, r24	; 44
	}
	// Enable SPI, Data Order, Clock Polarity, Clock Phase
	SPCR |= (1 << SPE) | dataorder | polarity | phase;
 352:	8c b5       	in	r24, 0x2c	; 44
 354:	46 2b       	or	r20, r22
 356:	24 2b       	or	r18, r20
 358:	28 2b       	or	r18, r24
 35a:	20 64       	ori	r18, 0x40	; 64
 35c:	2c bd       	out	0x2c, r18	; 44
 35e:	08 95       	ret

00000360 <spiWrite>:
	
}
// Function to send a byte of data
void spiWrite(uint8_t data)
{
	SPDR = data;
 360:	8e bd       	out	0x2e, r24	; 46
 362:	08 95       	ret

00000364 <__tablejump2__>:
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	05 90       	lpm	r0, Z+
 36a:	f4 91       	lpm	r31, Z
 36c:	e0 2d       	mov	r30, r0
 36e:	09 94       	ijmp

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
