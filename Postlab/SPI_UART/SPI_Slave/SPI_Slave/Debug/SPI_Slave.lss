
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2b  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e6  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000022e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	9f 00       	.word	0x009f	; ????
  6a:	a6 00       	.word	0x00a6	; ????
  6c:	ad 00       	.word	0x00ad	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	c1 00       	.word	0x00c1	; ????
  72:	cb 00       	.word	0x00cb	; ????
  74:	d5 00       	.word	0x00d5	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a1 30       	cpi	r26, 0x01	; 1
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  96:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <I_O>:
}

void I_O()
{
	// 8 bit counter
	DDRD = 0xFF; // OUT
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; // LOW
  a2:	1b b8       	out	0x0b, r1	; 11
  a4:	08 95       	ret

000000a6 <setup>:
/********************************************************************/
/*---------------------Non-interrupt Subroutines--------------------*/
void setup()
{
	// Disable global interruption
	cli();
  a6:	f8 94       	cli
	// Use 16MHz as F_cpu
	CLKPR = (1 << CLKPCE);
  a8:	e1 e6       	ldi	r30, 0x61	; 97
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	CLKPR = 0x00;
  b0:	10 82       	st	Z, r1
	// Disable serial communication
	//UCSR0B = 0x00;
	// I_O configuration
	I_O();
  b2:	0e 94 4f 00 	call	0x9e	; 0x9e <I_O>
	// SPI configuration
	initSPI(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_LAST_EDGE);
  b6:	24 e0       	ldi	r18, 0x04	; 4
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	0e 94 87 00 	call	0x10e	; 0x10e <initSPI>
	// SPI interruption enable
	SPCR |= (1 << SPIE);
  c2:	8c b5       	in	r24, 0x2c	; 44
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8c bd       	out	0x2c, r24	; 44
	// Enable global interruption
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <program>:
}

void program()
{
	// Display ADC6 value on PORTD
	PORTD = UARTvalue;
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <program+0xc>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <program+0x16>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <main>:
/********************************************************************/
/*------------------------------Main--------------------------------*/
int main(void)
{
	// Global configuration of uC
	setup();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	// Main loop
	while (1)
	{
		program();
  ea:	0e 94 66 00 	call	0xcc	; 0xcc <program>
  ee:	fd cf       	rjmp	.-6      	; 0xea <main+0x4>

000000f0 <__vector_17>:


/********************************************************************/
/*----------------------Interrupt Subroutines-----------------------*/
ISR(SPI_STC_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	UARTvalue = SPDR;
  fc:	8e b5       	in	r24, 0x2e	; 46
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <initSPI>:
 */ 

#include "SPI_lib.h"
// Function to initialize SPI configuration on uC
void initSPI(Spi_Type type, Spi_Data_Order dataorder, Spi_Clock_Polarity polarity, Spi_Clock_Phase phase)
{
 10e:	e8 2f       	mov	r30, r24
	// PB3: MOSI
	// PB4: MISO
	// PB5: SCK
	
	// Master mode
	if (type & (1 << MSTR))
 110:	84 ff       	sbrs	r24, 4
 112:	52 c0       	rjmp	.+164    	; 0x1b8 <initSPI+0xaa>
	{
		// OUTPUT
		DDRB |= (1 << DDB5) | (1 << DDB3) | (1 << DDB2);
 114:	84 b1       	in	r24, 0x04	; 4
 116:	8c 62       	ori	r24, 0x2C	; 44
 118:	84 b9       	out	0x04, r24	; 4
		// INPUT
		DDRB &= ~ (1 << DDB4);
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	84 b9       	out	0x04, r24	; 4
		// Master mode
		SPCR |= (1 << MSTR);
 120:	8c b5       	in	r24, 0x2c	; 44
 122:	80 61       	ori	r24, 0x10	; 16
 124:	8c bd       	out	0x2c, r24	; 44
		// Select PreScaler
		uint8_t temporal = type & 0b00000111;
 126:	e7 70       	andi	r30, 0x07	; 7
		// Cases
		switch(temporal)
 128:	8e 2f       	mov	r24, r30
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	87 30       	cpi	r24, 0x07	; 7
 12e:	91 05       	cpc	r25, r1
 130:	08 f0       	brcs	.+2      	; 0x134 <initSPI+0x26>
 132:	4b c0       	rjmp	.+150    	; 0x1ca <initSPI+0xbc>
 134:	fc 01       	movw	r30, r24
 136:	ec 5c       	subi	r30, 0xCC	; 204
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__tablejump2__>
		{
			case 0: // PreScaler = 2
				SPCR &= ~( (1 << SPR1) | (1 << SPR0) );
 13e:	8c b5       	in	r24, 0x2c	; 44
 140:	8c 7f       	andi	r24, 0xFC	; 252
 142:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1 << SPI2X);
 144:	8d b5       	in	r24, 0x2d	; 45
 146:	81 60       	ori	r24, 0x01	; 1
 148:	8d bd       	out	0x2d, r24	; 45
				break;
 14a:	3f c0       	rjmp	.+126    	; 0x1ca <initSPI+0xbc>
			case 1: // PreScaler = 4
				SPCR &= ~( (1 << SPR1) | (1 << SPR0) );
 14c:	8c b5       	in	r24, 0x2c	; 44
 14e:	8c 7f       	andi	r24, 0xFC	; 252
 150:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 152:	8d b5       	in	r24, 0x2d	; 45
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	8d bd       	out	0x2d, r24	; 45
				break;
 158:	38 c0       	rjmp	.+112    	; 0x1ca <initSPI+0xbc>
			case 2: // PreScaler = 8
				SPCR |= (1 << SPR0);
 15a:	8c b5       	in	r24, 0x2c	; 44
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1 << SPR1);
 160:	8c b5       	in	r24, 0x2c	; 44
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1 << SPI2X);
 166:	8d b5       	in	r24, 0x2d	; 45
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	8d bd       	out	0x2d, r24	; 45
				break;
 16c:	2e c0       	rjmp	.+92     	; 0x1ca <initSPI+0xbc>
			case 3: // PreScaler = 16
				SPCR |= (1 << SPR0);
 16e:	8c b5       	in	r24, 0x2c	; 44
 170:	81 60       	ori	r24, 0x01	; 1
 172:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1 << SPR1);
 174:	8c b5       	in	r24, 0x2c	; 44
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 17a:	8d b5       	in	r24, 0x2d	; 45
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	8d bd       	out	0x2d, r24	; 45
				break;
 180:	24 c0       	rjmp	.+72     	; 0x1ca <initSPI+0xbc>
			case 4: // PreScaler = 32
				SPCR &= ~(1 << SPR0);
 182:	8c b5       	in	r24, 0x2c	; 44
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1 << SPR1);
 188:	8c b5       	in	r24, 0x2c	; 44
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1 << SPI2X);
 18e:	8d b5       	in	r24, 0x2d	; 45
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8d bd       	out	0x2d, r24	; 45
				break;
 194:	1a c0       	rjmp	.+52     	; 0x1ca <initSPI+0xbc>
			case 5: // PreScaler = 64
				SPCR &= ~(1 << SPR0);
 196:	8c b5       	in	r24, 0x2c	; 44
 198:	8e 7f       	andi	r24, 0xFE	; 254
 19a:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1 << SPR1);
 19c:	8c b5       	in	r24, 0x2c	; 44
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 1a2:	8d b5       	in	r24, 0x2d	; 45
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	8d bd       	out	0x2d, r24	; 45
				break;
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <initSPI+0xbc>
			case 6: // PreScaler = 128
				SPCR |= (1 << SPR0) | (1 << SPR1);
 1aa:	8c b5       	in	r24, 0x2c	; 44
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1 << SPI2X);
 1b0:	8d b5       	in	r24, 0x2d	; 45
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	8d bd       	out	0x2d, r24	; 45
				break;
 1b6:	09 c0       	rjmp	.+18     	; 0x1ca <initSPI+0xbc>
		}
	}
	else
	{
		// OUTPUT
		DDRB &= ~((1 << DDB5) | (1 << DDB3) | (1 << DDB2));
 1b8:	84 b1       	in	r24, 0x04	; 4
 1ba:	83 7d       	andi	r24, 0xD3	; 211
 1bc:	84 b9       	out	0x04, r24	; 4
		// INPUT
		DDRB |= (1 << DDB4);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	80 61       	ori	r24, 0x10	; 16
 1c2:	84 b9       	out	0x04, r24	; 4
		// Slave mode
		SPCR &= ~ (1 << MSTR);
 1c4:	8c b5       	in	r24, 0x2c	; 44
 1c6:	8f 7e       	andi	r24, 0xEF	; 239
 1c8:	8c bd       	out	0x2c, r24	; 44
	}
	// Enable SPI, Data Order, Clock Polarity, Clock Phase
	SPCR |= (1 << SPE) | dataorder | polarity | phase;
 1ca:	8c b5       	in	r24, 0x2c	; 44
 1cc:	46 2b       	or	r20, r22
 1ce:	24 2b       	or	r18, r20
 1d0:	28 2b       	or	r18, r24
 1d2:	20 64       	ori	r18, 0x40	; 64
 1d4:	2c bd       	out	0x2c, r18	; 44
 1d6:	08 95       	ret

000001d8 <__tablejump2__>:
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	05 90       	lpm	r0, Z+
 1de:	f4 91       	lpm	r31, Z
 1e0:	e0 2d       	mov	r30, r0
 1e2:	09 94       	ijmp

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
